<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_airline.CheckFlightBeforeScheduling</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Checks the given flight record for consistency and meaningful choices. Returns an error message string with findings, or an empty string if there are no findings.</description>
        <name>CheckFlightBeforeScheduling</name>
        <script><![CDATA[function CheckFlightBeforeScheduling(grFlight)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var ArrayValueExists = x_snc_devtools.ArrayValueExists;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var GetRecord = x_snc_devtools.GetRecord;

	if (IsValidRecord(grFlight) == false)
	{
		return 'ERROR: No flight record provided!';
	}
	
	var strErrorMessage = '';
	
	var grAircraft = GetAircraftRecord(grFlight.aircraft);
	if (IsValidRecord(grAircraft) == false)
	{
		strErrorMessage += 'No aircraft specified.\n';
	}
	
	if (GetStringValue(grFlight.departure_airport) == '')
	{
		strErrorMessage += 'Departure airport has not been set.\n';
	}
	else
	{
		if (GetBoolValue(grFlight.departure_airport.core_country.x_snc_airline_flight_operations) == false)
		{
			strErrorMessage += 'The departure airport is in a country which is not configured for flight operations.\n';
		}
	}

	if (GetStringValue(grFlight.arrival_airport) == '')
	{
		strErrorMessage += 'Arrival airport has not been set.\n';
	}
	else
	{
		if (GetBoolValue(grFlight.arrival_airport.core_country.x_snc_airline_flight_operations) == false)
		{
			strErrorMessage += 'The arrival airport is in a country which is not configured for flight operations.\n';
		}
	}	

	if (GetStringValue(grFlight.departure_datetime) == '')
	{
		strErrorMessage += 'Departure date and time has not been set.\n';
	}

	if (GetStringValue(grFlight.arrival_datetime) == '')
	{
		strErrorMessage += 'Arrival date and time has not been set.\n';
	}

	if (GetStringValue(grFlight.departure_datetime) != '' && (GetStringValue(grFlight.departure_datetime) == GetStringValue(grFlight.arrival_datetime)))
	{
		strErrorMessage += 'Departure and arrival date and time are identical.\n';
	}

	if (GetStringValue(grFlight.aircraft) == '')
	{
		strErrorMessage += 'No aircraft selected.\n';
	}

	if (GetStringValue(grFlight.pilot) == '')
	{
		strErrorMessage += 'No pilot selected.\n';
	}
	else
	{
		if (GetStringValue(grFlight.pilot) == GetStringValue(grFlight.co_pilot))
		{
			strErrorMessage += 'A pilot cannot be the pilot and the co-pilot on the same flight.\n';
		}	
	}
	
	
	if (GetStringValue(grFlight.pilot) != '' && GetStringValue(grFlight.aircraft))
	{
		if (ArrayValueExists(GetArrayValue(grFlight.pilot.aircraft_licenses), GetStringValue(grFlight.aircraft.model)) == false)
		{
			strErrorMessage += 'According to the pilot\'s profile the pilot cannot fly the selected aircraft model.\n';
		}
	}
	
	if (GetStringValue(grFlight.co_pilot) != '' && GetStringValue(grFlight.aircraft))
	{
		// deactivated due to story STRY0010206 -> should be configurable
		/*
		if (ArrayValueExists(GetArrayValue(grFlight.co_pilot.aircraft_licenses), GetStringValue(grFlight.aircraft.model)) == false)
		{
			strErrorMessage += 'According to the co-pilot\'s profile the co-pilot cannot fly the selected aircraft model.\n';
		}
		*/
	}	
	
	
	if (grFlight.deicing == true)
	{
		if (grAircraft.deicing == false)
		{
			strErrorMessage += 'Deicing is required for the flight but the aircraft does not support deicing.\n';
		}
	}		

	/*
	var aSegments = GetSegmentsFromFlight(grFlight.sys_id);
	for (var nSegment = 0; nSegment < aSegments.length; nSegment++)
	{
		if (GetStringValue(grFlight.arrival_airport) == '')
		{
			strErrorMessage += 'Arrival airport has not been set.\n';
		}
		else
		{
			if (GetBoolValue(grFlight.arrival_airport.core_country.x_snc_airline_flight_operations) == false)
			{
				strErrorMessage += 'The arrival airport is in a country which is not configured for flight operations.\n';
			}
		}		
	}
	*/
	
	var grStops = new GlideRecord('x_snc_airline_flight_stop');
	grStops.addQuery('flight','=',grFlight.sys_id);
	grStops.orderBy('stop');
	grStops.query();
	while (grStops.next())
	{
		var grAirportStop = GetRecord('x_snc_airline_airport',grStops.airport);
		if (IsValidRecord(grAirportStop) == false)
		{
			strErrorMessage += 'Stop '+grStops.stop+' airport has not been set.\n';
		}
		else
		{
			if (GetBoolValue(grStops.airport.core_country.x_snc_airline_flight_operations) == false)
			{
				strErrorMessage += 'Stop '+grStops.stop+' airport is in a country which is not configured for flight operations.\n';
			}
			
			var nRequiredFuel = GetIntegerValue(grStops.fuel);
			if (nRequiredFuel > 0)
			{
				if (IsValidRecord(grAircraft) == true)
				{
					var aCompatibleFuelTypes = GetFuelTypesFromAircraft(grAircraft);
					if (aCompatibleFuelTypes.length == 0)
					{
						strErrorMessage += 'No fuel types have been specified for the aircraft model.\n';
					}
					else
					{
						var aOfferedFuelTypes = GetArrayValue(grAirportStop.fuel_types);
						if (aOfferedFuelTypes.length == 0)
						{
							strErrorMessage += 'Stop '+grStops.stop+' airport does not support any refueling.\n';
						}
						else
						{
							var bFuelTypeMatch = false;
							for (var nFuelType = 0; nFuelType < aCompatibleFuelTypes.length; nFuelType++)
							{
								if (ArrayValueExists(aOfferedFuelTypes,aCompatibleFuelTypes[nFuelType]))
								{
									bFuelTypeMatch = true;
								}
							}
							if (bFuelTypeMatch == false)
							{
								strErrorMessage += 'Stop '+grStops.stop+' airport does not offer any of the fuel types associated with the aircraft.\n';
							}
							
						}
					}
				}
			}
					
			
			
		}		
		
		if (GetStringValue(grStops.arrival_datetime) == '')
		{
			strErrorMessage += 'Stop '+grStops.stop+' arrival date and time has not been set.\n';
		}		
		if (GetStringValue(grStops.departure_datetime) == '')
		{
			strErrorMessage += 'Stop '+grStops.stop+' departure date and time has not been set.\n';
		}
	}
	
	
	return strErrorMessage;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-30 10:04:19</sys_created_on>
        <sys_id>11391b61dba6c910b652edb30596194e</sys_id>
        <sys_mod_count>26</sys_mod_count>
        <sys_name>CheckFlightBeforeScheduling</sys_name>
        <sys_package display_value="Airline" source="x_snc_airline">54ee8da3dbd64110b652edb305961973</sys_package>
        <sys_policy/>
        <sys_scope display_value="Airline">54ee8da3dbd64110b652edb305961973</sys_scope>
        <sys_update_name>sys_script_include_11391b61dba6c910b652edb30596194e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-16 18:43:49</sys_updated_on>
    </sys_script_include>
</record_update>
