<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_airline.MakePriorPermissionRequired</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MakePriorPermissionRequired</name>
        <script><![CDATA[function MakePriorPermissionRequired(grStop)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var RenderDate = x_snc_devtools.RenderDate;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var GetFloatValue = x_snc_devtools.GetFloatValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetArrayValue = x_snc_devtools.GetArrayValue;

	
	function RenderTime(time)
	{
		var strTime = x_snc_devtools.RenderTime(time);
		return strTime.substr(0,5);
	}
	
	function RenderVolume(fValue)
	{
		var fValue = GetFloatValue(fValue);
		var strValue = fValue.toFixed(2);	
		return strValue + ' mÂ³';
	}
	
	var strPPR = '';
	
	strPPR += 'Call Sign / Tail number: '+GetStringValue(grStop.flight.aircraft.tail_number)+'\n';
	strPPR += 'Aircraft Type: '+GetStringValue(grStop.flight.aircraft.model.display)+'\n';
	strPPR += 'Flight Date: '+RenderDate(grStop.arrival_datetime)+'\n';
	strPPR += '\n';
	strPPR += 'Arrival Time: '+RenderTime(grStop.arrival_datetime)+' (UTC)\n';

	var grPreviousStop = new GlideRecord('x_snc_airline_flight_stop');
	grPreviousStop.orderBy(grStop.stop);
	grPreviousStop.addQuery('flight','=',grStop.flight);
	grPreviousStop.addQuery('stop','<',grStop.stop);
	grPreviousStop.setLimit(1);
	grPreviousStop.query();
	if (grPreviousStop.next())
	{
		strPPR += 'Arrival From: '+grPreviousStop.airport.icao+'\n';
	}
	else
	{
		strPPR += 'Arrival From: '+grStop.flight.departure_airport.icao+'\n';
	}
	
	strPPR += '\n';
	strPPR += 'Departure Time: '+RenderTime(grStop.departure_datetime)+' (UTC)\n';

	var grNextStop = new GlideRecord('x_snc_airline_flight_stop');
	grNextStop.orderBy(grStop.stop);
	grNextStop.addQuery('flight','=',grStop.flight);
	grNextStop.addQuery('stop','>',grStop.stop);
	grNextStop.setLimit(1);
	grNextStop.query();
	if (grNextStop.next())
	{
		strPPR += 'Departure To:   '+grNextStop.airport.icao+'\n';
	}
	else
	{
		strPPR += 'Departure To:   '+grStop.flight.arrival_airport.icao+'\n';
	}	

	strPPR += '\n';

	
	var bFuelRequired = GetBoolValue(grStop.fuel_required);
	var nFuel = GetIntegerValue(grStop.fuel);

	strPPR += 'Refuel Required: ';
	if (bFuelRequired == true)
	{
		strPPR +=  (nFuel)?(nFuel+' liters '+grStop.flight.aircraft.fuel.getDisplayValue()):('YES');
	}
	else
	{
		strPPR +=  'NO';
	}
	strPPR += '\n';
	
	strPPR += '\n';
	strPPR += 'Pilot in Command: '+grStop.flight.pilot.name+' '+grStop.flight.pilot.mobile_phone+'\n';
	
	strPPR += '\n';

	strPPR += 'Cargo Unload:\n';
	var aParcel = GetArrayValue(grStop.parcel_unload);
	for (var nParcel = 0; nParcel < aParcel.length; nParcel++)
	{
		var grParcel = x_snc_parcel.GetParcelRecord(aParcel[nParcel]);
		if (IsValidRecord(grParcel))
		{
			strPPR += grParcel.number + ': ' + grParcel.total_weight + ' kg - '+RenderVolume(grParcel.total_volume)+'\n';
		}
	}
	if (aParcel.length == 0)
	{
		strPPR += 'none\n';
	}
	strPPR += '\n';
	
	strPPR += 'Cargo Load:\n';
	var aParcel = GetArrayValue(grStop.parcel_load);
	for (var nParcel = 0; nParcel < aParcel.length; nParcel++)
	{
		var grParcel = x_snc_parcel.GetParcelRecord(aParcel[nParcel]);
		if (IsValidRecord(grParcel))
		{
			strPPR += grParcel.number + ': ' + grParcel.total_weight + ' kg - '+RenderVolume(grParcel.total_volume)+'\n';
		}
	}
	if (aParcel.length == 0)
	{
		strPPR += 'none\n';
	}
	strPPR += '\n';
	

	

	strPPR += 'Passenger Offboarding:\n';
	var aPassenger = GetArrayValue(grStop.passenger_offboarding);
	for (var nPassenger = 0; nPassenger < aPassenger.length; nPassenger++)
	{
		var grPassenger = GetPassengerRecord(aPassenger[nPassenger]);
		if (IsValidRecord(grPassenger))
		{
			strPPR += grPassenger.number + ': ' + grPassenger.display + ' - '+grPassenger.total_weight+' kg\n';
		}
	}
	if (aPassenger.length == 0)
	{
		strPPR += 'none\n';
	}
	strPPR += '\n';		
	
	
	strPPR += 'Passenger Boarding:\n';
	var aPassenger = GetArrayValue(grStop.passenger_boarding);
	for (var nPassenger = 0; nPassenger < aPassenger.length; nPassenger++)
	{
		var grPassenger = GetPassengerRecord(aPassenger[nPassenger]);
		if (IsValidRecord(grPassenger))
		{
			strPPR += grPassenger.number + ': ' + grPassenger.display + ' - '+grPassenger.total_weight+' kg\n';
		}
	}
	if (aPassenger.length == 0)
	{
		strPPR += 'none\n';
	}
	strPPR += '\n';	
	

	return strPPR;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-30 19:09:00</sys_created_on>
        <sys_id>c1ffb07bdb8bc910b652edb305961972</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>MakePriorPermissionRequired</sys_name>
        <sys_package display_value="Airline WORK IN PROGRESS" source="x_snc_airline">54ee8da3dbd64110b652edb305961973</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Airline WORK IN PROGRESS">54ee8da3dbd64110b652edb305961973</sys_scope>
        <sys_update_name>sys_script_include_c1ffb07bdb8bc910b652edb305961972</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-16 16:19:06</sys_updated_on>
    </sys_script_include>
</record_update>
