<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_airline.GetAirportsFromFlight</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns an array of objects containing all the airports used in a flight based on a Sys ID, or an empty array if the flight cannot be found.</description>
        <name>GetAirportsFromFlight</name>
        <script><![CDATA[function GetAirportsFromFlight(strFlightSysId)
{

	var GetKeys = x_snc_devtools.GetKeys;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GetRecord = x_snc_devtools.GetRecord;
	var GetValue = x_snc_devtools.GetValue;
	var IsObject= x_snc_devtools.IsObject;
	var GetStringValue = x_snc_devtools.GetStringValue;

	
	var grFlight = GetFlightRecord(strFlightSysId);
	if (IsValidRecord(grFlight) == false)
	{
		return Array();
	}
	

	var airports = {};

	
	function AddAirport(grAirport,strFunction)
	{
		var airport = GetValue(airport,grAirport.sys_id);
		if (IsObject(airport) == true)
		{
			airport.airport += ', '+strFunction;
		}
		else
		{
			var airport = {};
			airport.name = grAirport.name;
			airport.icao = grAirport.icao;
			airport.phone = grAirport.phone;
			airport.airport_function = strFunction;
		}
		
		airports[GetStringValue(grAirport.sys_id)] = airport;
	}
	
	
	var grAirport = GetRecord('x_snc_airline_airport',grFlight.departure_airport);
	if (IsValidRecord(grAirport))
	{
		AddAirport(grAirport,'Departure');
	}

	var grStops = new GlideRecord('x_snc_airline_flight_stop');
	grStops.addQuery('flight','=',grFlight.sys_id);
	grStops.orderBy('stop');
	grStops.query();
	while (grStops.next())
	{
		grAirport = GetRecord('x_snc_airline_airport',grStops.airport);
		if (IsValidRecord(grAirport))
		{
			AddAirport(grAirport,'Stop '+grStops.stop);
		}
	}

	grAirport = GetRecord('x_snc_airline_airport',grFlight.arrival_airport);
	if (IsValidRecord(grAirport))
	{
		AddAirport(grAirport,'Arrival');
	}
	
	var aAirports = [];
	var aSysIds = GetKeys(airports);
	for (var nAirport = 0; nAirport < aSysIds.length; nAirport++)
	{
		aAirports.push(airports[aSysIds[nAirport]]);
	}
	
	return aAirports;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-29 20:51:19</sys_created_on>
        <sys_id>3bfd042bdbcb4910b652edb30596199d</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>GetAirportsFromFlight</sys_name>
        <sys_package display_value="Airline WORK IN PROGRESS" source="x_snc_airline">54ee8da3dbd64110b652edb305961973</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Airline WORK IN PROGRESS">54ee8da3dbd64110b652edb305961973</sys_scope>
        <sys_update_name>sys_script_include_3bfd042bdbcb4910b652edb30596199d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-19 13:59:10</sys_updated_on>
    </sys_script_include>
</record_update>
